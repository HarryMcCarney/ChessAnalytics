[{"uri":"/Publish/index.html","title":"Some other stuff","content":"(**\n---\ntitle: Some other stuff\ncategory: Reports\ncategoryindex: 1\nindex: 1    \n---\n*)\n\n(** \n# Introduction\n*)\n\n(***hide***)\n#r \u0022nuget: fsharp.data\u0022\n#r \u0022nuget: Plotly.NET, 3.0.1\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 3.0.0\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n\nopen FSharp.Data\nopen System\nopen Plotly.NET\nopen FSharp.Stats\nopen FSharp.Stats.Distributions\n\nlet file = \u0022C:/LichessData/data/\u0022 \u002B \u00222023-1-07--15-48-46-playerratings.csv\u0022\n\nlet csv = CsvFile.Load(file, hasHeaders = true, separators = \u0022|\u0022)\n\ntype MonthlyRating =\n    { UserName: string\n      Month: DateTime\n      Rating: float }\n\nlet lastDayOfMonth (dt: DateTime) =\n    DateTime(dt.Year, dt.Month, DateTime.DaysInMonth(dt.Year, dt.Month))\n\nlet getRatingGain (ratings: seq\u003CMonthlyRating\u003E) =\n    let sortedseq = ratings |\u003E Seq.sortBy (fun x -\u003E x.Month)\n    (sortedseq |\u003E Seq.last).Rating - (sortedseq |\u003E Seq.head).Rating\n\nlet results =\n    csv.Rows\n    |\u003E Seq.map (fun r -\u003E\n        { UserName = (r.GetColumn \u0022UserName\u0022)\n          Month = lastDayOfMonth ((r.GetColumn \u0022Date\u0022).AsDateTime())\n          Rating = (r.GetColumn \u0022Rating\u0022).AsFloat() })\n    |\u003E Seq.groupBy (fun x -\u003E x.UserName, x.Month)\n    |\u003E Seq.map (fun (g, r) -\u003E\n        { UserName = (fst g)\n          Month = (snd g)\n          Rating = (r |\u003E Seq.averageBy (fun x -\u003E x.Rating)) })\n    |\u003E Seq.groupBy (fun x -\u003E x.UserName)\n    |\u003E Seq.map (fun x -\u003E (fst x), (snd x) |\u003E getRatingGain)\n\n\nlet trackingMean =\n    csv.Rows\n    |\u003E Seq.map (fun r -\u003E\n        { UserName = (r.GetColumn \u0022UserName\u0022)\n          Month = lastDayOfMonth ((r.GetColumn \u0022Date\u0022).AsDateTime())\n          Rating = (r.GetColumn \u0022Rating\u0022).AsFloat() })\n    |\u003E Seq.groupBy (fun x -\u003E x.Month)\n    |\u003E Seq.map (fun (m, r) -\u003E (m, (r |\u003E Seq.averageBy (fun x -\u003E x.Rating))))\n    |\u003E Seq.sortBy fst\n\nlet trackingMedian =\n    csv.Rows\n    |\u003E Seq.map (fun r -\u003E\n        { UserName = (r.GetColumn \u0022UserName\u0022)\n          Month = lastDayOfMonth ((r.GetColumn \u0022Date\u0022).AsDateTime())\n          Rating = (r.GetColumn \u0022Rating\u0022).AsFloat() })\n    |\u003E Seq.groupBy (fun x -\u003E x.Month)\n    |\u003E Seq.map (fun (m, r) -\u003E (m, (r |\u003E Seq.map (fun x -\u003E x.Rating) |\u003E Seq.median)))\n    |\u003E Seq.sortBy fst\n\nlet dates = (trackingMean |\u003E Seq.map fst)\nlet means = (trackingMean |\u003E Seq.map snd)\nlet medians = (trackingMedian |\u003E Seq.map snd)\n\nlet meanLine = Chart.Line(dates, means, Name = \u0022Means\u0022)\nlet medianLine = Chart.Line(dates, medians, Name = \u0022Medians\u0022)\n\nlet density (xs: seq\u003Cfloat\u003E) =\n    Chart.Histogram(xs, HistNorm = StyleParam.HistNorm.Probability)\n\nlet vals = results |\u003E Seq.map snd |\u003E Seq.filter (fun x -\u003E x \u003C\u003E 0) |\u003E Seq.sort\n\n[ meanLine; medianLine ]\n|\u003E Chart.combine\n|\u003E Chart.withDescription (\n    ChartDescription.create\n        \u0022Average Rapid rating for 5k players with more than 100 rapid games\u0022\n        \u0022Shows inflation and deflation. Likely due to influx of beginners during lockdowns\u0022\n)\n|\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(***hide***)\ndensity vals\n|\u003E Chart.withXAxisStyle (\u0022Rating change\u0022)\n|\u003E Chart.withYAxisStyle (\u0022Probability\u0022)\n|\u003E Chart.withDescription (ChartDescription.create \u0022Rating change of 5k Lichess players from 2015 to 2022\u0022 \u0022\u0022)\n|\u003E GenericChart.toChartHTML\n(***include-it-raw***)"}]